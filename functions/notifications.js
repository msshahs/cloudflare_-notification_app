function generateUUID() {
    // Generates a UUID in the format "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx"
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (char) => {
        const random = (Math.random() * 16) | 0;
        const value = char === 'x' ? random : (random & 0x3) | 0x8;
        return value.toString(16);
    });
}


// Helper function for managing CORS
function manageCORSForRequests() {
    return {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'GET, POST, DELETE, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
    };
}

// // Authentication function (for potential future use)
// function authenticateRequest(request) {
//     // Implement basic authentication if needed
// }

// POST: /api/notifications - Create and store notifications
export async function onRequestPost({ request, env }) {
    try {
        const notifications = await request.json();

        // Ensure notifications are always an array
        const notificationsArray = Array.isArray(notifications) ? notifications : [notifications];

        // Process each notification with unique ID and timestamp
        const processedNotifications = notificationsArray.map((notif) => ({
            id: generateUUID(),
            ...notif,
            timestamp: Date.now(),
        }));

        // Store in Workers KV under a single key
        const existingData = await env.NOTIFICATIONS_KV.get("notifications", "json") || [];
        const updatedData = [...existingData, ...processedNotifications];
        await env.NOTIFICATIONS_KV.put("notifications", JSON.stringify(updatedData));

        // Return the notification response as Array
        return new Response(JSON.stringify(processedNotifications), {
            status: 201,
            headers: {
                'Content-Type': 'application/json',
                ...manageCORSForRequests()
            }
        });
    } catch (error) {
        return new Response("Bad Request", { status: 400 });
    }
}

// GET: /api/notifications - Retrieve all notifications
export async function onRequestGet({ env }) {
    const notifications = await retrieveNotifsFromKVStore(env);
    return new Response(JSON.stringify(notifications), {
        status: 200,
        headers: {
            'Content-Type': 'application/json',
            ...manageCORSForRequests()
        }
    });
}

// Helper function to retrieve notifications from KV
async function retrieveNotifsFromKVStore(env) {
    return await env.NOTIFICATIONS_KV.get("notifications", "json") || [];
}

// DELETE: /api/notifications - Delete all notifications
export async function onRequestDelete({ env }) {
    await deleteAllAutoGeneratedNotifsFromKV(env);
    return new Response(JSON.stringify({ message: "Notifications deleted successfully!" }), {
        status: 200,
        headers: {
            'Content-Type': 'application/json',
            ...manageCORSForRequests()
        }
    });
}

// Helper function for deleting notifications
async function deleteAllAutoGeneratedNotifsFromKV(env) {
    await env.NOTIFICATIONS_KV.delete("notifications");
    // Removal of notifications is successful.
}
